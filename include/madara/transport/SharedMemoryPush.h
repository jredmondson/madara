
#ifndef   _TRANSPORT_SHAREDMEMORYPUSH_H_
#define   _TRANSPORT_SHAREDMEMORYPUSH_H_

#include <vector>
#include <string>

#include "madara/transport/Transport.h"
#include "madara/knowledge/KnowledgeBase.h"
#include "madara/MadaraExport.h"

namespace madara { namespace transport
{
  /**
   * Custom network transport generated by gpc.pl
   **/
  class MADARA_EXPORT SharedMemoryPush : public madara::transport::Base
  {
  public:
    /**
     * Constructor
     * @param   id                unique identifier (generally host:port)
     * @param   new_settings      settings to apply to the transport
     * @param   context           the knowledge record context
     **/
    SharedMemoryPush (const std::string & id,
      madara::transport::TransportSettings & new_settings,
      knowledge::KnowledgeBase & context);

    /**
     * Destructor
     **/
    virtual ~SharedMemoryPush ();
    
    /**
     * Clears the list of knowledge bases to push to
     **/
    inline void clear (void)
    {
      kbs_.clear ();
    }

    /**
     * Adds the list of knowledge bases to the push list
     **/
    void add (std::vector <knowledge::KnowledgeBase> & kbs)
    {
      kbs_.insert (kbs_.end(), kbs.begin(), kbs.end());
    }

    /**
     * Sets the push list to the provided list of knowledge bases
     **/
    void set (std::vector <knowledge::KnowledgeBase> & kbs)
    {
      clear();
      kbs_ = kbs;
    }

    /**
     * Sends a list of updates to the domain. This function must be
     * implemented by your transport
     * @param  modifieds  a list of keys to values of all records that have
     *          been updated and could be sent.
     * @return  result of operation or -1 if we are shutting down
     **/
    virtual long send_data (
      const knowledge::KnowledgeMap & modifieds) override;

  protected:
    /// threads for monitoring knowledge updates
    std::vector <knowledge::KnowledgeBase> kbs_;
  };
} // end transport namespace
} // end madara namespace

#endif // _TRANSPORT_SHAREDMEMORYPUSH_H_
