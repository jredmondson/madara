
project (Test_Datatypes_Lib) : build_files, using_splice, splice_transport, using_ndds, madara_zmq, using_ssl, ssl_filters, lz4_filters, ndds_transport, no_karl, no_xml, port/python/using_python, python_callbacks, null_lock, using_simtime, debug_build, using_boost, using_clang, using_madara {

  requires += tests

  sharedname = datatypes_test
  dynamicflags += MADARA_BUILD_DLL
  staticflags += MADARA_BUILD_STATIC
  libout = $(MADARA_ROOT)/lib

  prebuild = perl $(MADARA_ROOT)/bin/generate_version_include.pl

  specific(prop:microsoft) {
    DisableSpecificWarnings += 4005 4251 4275 4244
    macros += _CRT_SECURE_NO_WARNINGS
  }

  specific(prop:make) {
    postbuild += ln -sf $(MADARA_ROOT)/lib/libdatatypes_test.so $(MADARA_ROOT)/.
  }

  Source_Files {
    tests/datatypes_test.cpp
  }

  Header_Files {
  }
}

project (Test_Multicast_Mutex) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_multicast_mutex
  
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/multicast/test_multicast_mutex.cpp
  }
}

project (Test_Pugi) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_pugi
  
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/test_pugi.cpp
  }
}

project (TestMulticastCloseAndAttach) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_multicast_close_and_attach
  
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/multicast/test_multicast_close_and_attach.cpp
  }
}

project (Test_Multicast_Peer_Discovery) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_multicast_peer_discovery
  
  
  requires += tests

  
  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/multicast/test_multicast_peer_discovery.cpp
  }
}

project (Test_Rebroadcast_Ring) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_rebroadcast_ring
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/test_rebroadcast_ring.cpp
  }
}

project (Test_Barrier) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_barrier
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/test_barrier.cpp
  }
}

project (Test_Kb_Destructions) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_kb_destructions
  
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/test_kb_destructions.cpp
  }
}

project (Test_Counter) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_counter
  
  
  requires += tests


  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/test_counter.cpp
  }
}

project (Test_Fragmentation) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_fragmentation
  
  
  requires += tests


  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/test_fragmentation.cpp
  }
}

project (Test_Get_Record) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_get_record
  
  
  requires += tests


  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/test_get_record.cpp
  }
}

project (Test_Threader_Queue_Perf) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_threader_queue_perf
  
  
  requires += tests


  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/threads/test_threader_queue_perf.cpp
  }
}

project (Test_Threader_Counter) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_threader_counter
  
  
  requires += tests


  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/threads/test_threader_counter.cpp
  }
}

project (Test_Threader_Producer_Consumer) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_threader_producer_consumer
  
  
  requires += tests


  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/threads/test_threader_producer_consumer.cpp
  }
}

project (Test_Threader_Hello_World) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_threader_hello_world
  
  
  requires += tests


  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/threads/test_threader_hello_world.cpp
  }
}

project (Test_Threader_Periodic_Counter) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_threader_periodic_counter
  
  requires += tests


  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/threads/test_threader_periodic_counter.cpp
  }
}

project (Test_Threader_Change_Hertz) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_threader_change_hertz
  
  
  requires += tests


  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/threads/test_threader_change_hertz.cpp
  }
}

project (Test_Threader_Introspection) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_threader_introspection
  
  
  requires += tests


  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/threads/test_threader_introspection.cpp
  }
}

project (Test_Context_Copy) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_context_copy
  
  
  requires += tests


  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/test_context_copy.cpp
  }
}

project (Test_Prefix_To_Map) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_prefix_to_map
  
  
  requires += tests


  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/test_prefix_to_map.cpp
  }
}

project (Test_KaRL_Containers) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_karl_containers
  
  
  requires += tests


  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/test_karl_containers.cpp
  }
}

project (Test_KaRL_Exceptions) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_karl_exceptions
  
  
  requires += tests


  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/test_karl_exceptions.cpp
  }
}

project (Test_File_Rebroadcasts) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_file_rebroadcasts
  
  
  requires += tests


  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/test_file_rebroadcasts.cpp
  }
}

project (Test_Multicast_Aggregate_Filters) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_multicast_aggregate_filters
  
  requires += tests


  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/multicast/test_multicast_aggregate_filters.cpp
  }
}

project (Test_Multicast_Send_List) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_multicast_send_list
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/multicast/test_multicast_send_list.cpp
  }
}

project (Test_Broadcast_Aggregate_Filters) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_broadcast_aggregate_filters
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/broadcast/test_broadcast_aggregate_filters.cpp
  }
}

project (Test_UDP_Aggregate_Filters) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_udp_aggregate_filters
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/udp/test_udp_aggregate_filters.cpp
  }
}

project (Test_Arrays) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_arrays
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/test_arrays.cpp
  }
}

project (Network_Counter_Filter) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = network_counter_filter
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/network_counter_filter.cpp
  }
}

project (Network_Profiler) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = network_profiler
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/network_profiler.cpp
  }
}

project (Test_Lamport) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_lamport
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/test_lamport.cpp
  }
}

project (Test_Modifieds) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_modifieds
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/test_modifieds.cpp
  }
}

project (Test_Checkpointing) : using_madara, using_ssl, using_lz4, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_checkpointing
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  CAPN_Files {
    tests/capnfiles
  }

  Source_Files {
    tests/test_checkpointing.cpp
  }
}

project (Test_Bandwidth_Monitor) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_bandwidth_monitor
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/test_bandwidth_monitor.cpp
  }
}

project (Test_Packet_Scheduler) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_packet_scheduler
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/test_packet_scheduler.cpp
  }
}

project (Test_Encoding) : using_madara, no_karl, no_xml, null_lock, using_splice, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_encoding
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/test_encoding.cpp
  }
}

project (Test_QoS_Transport_Settings) : using_madara, using_splice, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_qos_transport_settings
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/test_qos_transport_settings.cpp
  }
}

project (Test_Evaluate) : using_madara, no_karl, no_xml, null_lock, using_splice, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_evaluate
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/test_evaluate.cpp
  }
}

project (Test_Multicast_Rules) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_multicast_rules
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/multicast/test_multicast_rules.cpp
  }
}

project (Test_Multicast_Rebroadcast) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_multicast_rebroadcast
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/multicast/test_multicast_rebroadcast.cpp
  }
}

project (Test_Multicast_Filters) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_multicast_filters
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/multicast/test_multicast_filters.cpp
  }
}

project (Test_UDP_Rules) : using_madara, using_splice, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_udp_rules
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/udp/test_udp_rules.cpp
  }
}

project (Test_UDP_Filters) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_udp_filters
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/udp/test_udp_filters.cpp
  }
}

project (Test_UDP_Rebroadcast) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_udp_rebroadcast
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/udp/test_udp_rebroadcast.cpp
  }
}

project (Test_System_Calls) : using_madara, using_splice, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_system_calls
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/test_system_calls.cpp
  }
}

project (Test_Broadcast_Rules) : using_madara, using_splice, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_broadcast_rules
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/broadcast/test_broadcast_rules.cpp
  }
}

project (Test_Broadcast_Filters) : using_madara, using_splice, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_broadcast_filters
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/broadcast/test_broadcast_filters.cpp
  }
}

project (Test_Broadcast_Rebroadcast) : using_madara, using_splice, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_broadcast_rebroadcast
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/broadcast/test_broadcast_rebroadcast.cpp
  }
}


project (Test_Basic_Reasoning) : using_madara, using_splice, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_basic_reasoning
  
  requires += tests

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/test_basic_reasoning.cpp
  }
}

project (Test_Reasoning_Throughput) : using_madara, using_splice, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_reasoning_throughput
 
  requires += tests
  
  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/test_reasoning_throughput.cpp
  }
}

project (Test_Files) : using_madara, using_splice, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_files
  
  
  requires += tests
  
  Documentation_Files {
  }
  

  Header_Files {
  }

  Source_Files {
    tests/test_files.cpp
  }
}

project (Test_Filters) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_filters
  
  requires += tests

  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_filters.cpp
  }
}

project (Test_Key_Expansion) : using_madara, using_splice, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_key_expansion
  
  
  requires += tests
  
  Documentation_Files {
  }
  

  Header_Files {
  }

  Source_Files {
    tests/test_key_expansion.cpp
  }
}

project (Test_Print_Statement) : using_madara, using_splice, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_print_statement
  
  
  requires += tests
  
  Documentation_Files {
  }
  

  Header_Files {
  }

  Source_Files {
    tests/test_print_statement.cpp
  }
}

project (Test_Timed_Wait) : using_madara, using_splice, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_timed_wait
  
  
  requires += tests
  
  Documentation_Files {
  }
  

  Header_Files {
  }

  Source_Files {
    tests/test_timed_wait.cpp
  }
}

project (Test_AES_256) : using_madara, using_ssl, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_aes_256
  
  
  requires += tests ssl
  
  Documentation_Files {
  }
  

  Header_Files {
  }

  Source_Files {
    tests/ssl/test_aes_256.cpp
  }
}



project (Test_Synchronization) : using_madara, using_splice, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_synchronization
  
  
  requires += tests
  
  Documentation_Files {
  }
  

  Header_Files {
  }

  Source_Files {
    tests/transports/test_synchronization.cpp
  }
}

project (Test_Synchronization_Three_State) : using_madara, using_splice, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_synchronization_three_state
  
  
  requires += tests
  

  Documentation_Files {
  }


  Header_Files {
  }

  Source_Files {
    tests/transports/test_synchronization_three_state.cpp
  }
}


project (Test_Splice) : using_madara, using_splice, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_splice
  
  
  requires += tests opensplice

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/splice/test_splice.cpp
  }
}

project (Test_Splice_Rules) : using_madara, using_splice, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_splice_rules
  
  
  requires += tests opensplice

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/splice/test_splice_rules.cpp
  }
}

project (Test_Splice_Rebroadcast) : using_madara, using_splice, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_splice_rebroadcast
  
  
  requires += tests opensplice

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/splice/test_splice_rebroadcast.cpp
  }
}

project (Test_Splice_Filters) : using_madara, using_splice, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_splice_filters
  
  
  requires += tests opensplice

  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/transports/splice/test_splice_filters.cpp
  }
}


project (Test_UDP) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  requires += tests
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_udp
  
  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/transports/udp/test_udp.cpp
  }
}

project (Test_Registry) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  requires += tests
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_registry
  
  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/transports/registry/test_registry.cpp
  }
}

project (Test_Multicast) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  requires += tests
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_multicast
  
  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/transports/multicast/test_multicast.cpp
  }
}


project (Test_TestZMQ) : using_madara, no_karl, no_xml, null_lock, using_zmq {
  requires += tests zmq
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_zmq
  
  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/transports/zmq/test_zmq.cpp
  }
}


project (Test_Basic_ZMQ) : using_madara, no_karl, no_xml, null_lock, using_zmq {
  requires += tests zmq
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_basic_zmq
  
  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/transports/zmq/test_basic_zmq.cpp
  }
}


project (Test_Multicast_SSL) : using_madara, using_ssl, no_karl, no_xml, null_lock, using_simtime {
  requires += tests ssl
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_multicast_ssl
  
  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/transports/multicast/test_multicast_ssl.cpp
  }
}

project (Test_Broadcast) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  requires += tests
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_broadcast
  
  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/transports/broadcast/test_broadcast.cpp
  }
}

project (Profile_Architecture) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  requires += tests
  
  exeout = $(MADARA_ROOT)/bin
  exename = profile_architecture
  
  Documentation_Files {
    tests/settings
  }

  Header_Files {
  }

  Source_Files {
    tests/profile_architecture.cpp
  }
}

project (Test_Utility) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  requires += tests
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_utility
  
  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_utility.cpp
  }
}

project (Test_Peroidic_Wait) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  requires += tests
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_periodic_wait
  
  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_periodic_wait.cpp
  }
}

project (Test_Primitive_Types) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  requires += tests
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_primitive_types
  
  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/transports/test_primitive_types.cpp
  }
}

project (Test_Safe_Bool) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  requires += tests
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_safe_bool
  
  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_safe_bool.cpp
  }
}

project (Test_Logging) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  requires += tests
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_logging
  
  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_logging.cpp
  }
}

project (Test_RCWThread) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  requires += tests
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_rcwthread
  
  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/rcw/test_rcwthread.cpp
  }
}

project (Test_RCW_Transaction) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  requires += tests
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_rcw_transaction
  
  Documentation_Files {
  }

  Header_Files {
    tests/rcw/test.h
  }

  Source_Files {
    tests/rcw/test_rcw_transaction.cpp
  }
}

project (Test_RCW_Tracked) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  requires += tests
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_rcw_tracked
  
  Documentation_Files {
  }

  Header_Files {
    tests/rcw/test.h
  }

  Source_Files {
    tests/rcw/test_rcw_tracked.cpp
  }
}

project (Test_RCW_Custom) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  requires += tests
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_rcw_custom
  
  Documentation_Files {
  }

  Header_Files {
    tests/rcw/test.h
  }

  Source_Files {
    tests/rcw/test_rcw_custom.cpp
  }
}

project (Test_RCW_ProdCon) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  requires += tests
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_rcw_prodcon
  
  Documentation_Files {
  }

  Header_Files {
    tests/rcw/test.h
  }

  Source_Files {
    tests/rcw/test_rcw_prodcon.cpp
  }
}

project (Test_Save_Modifieds) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  requires += tests
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_save_modifieds
  
  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_save_modifieds.cpp
  }
}

project (Test_Shared_Record) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  requires += tests
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_shared_record
  
  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_shared_record.cpp
  }
}

project (Test_Simtime) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  requires += tests simtime
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_simtime
  
  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_simtime.cpp
  }
}


project (Test_Knowledege_Record) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  exeout = $(MADARA_ROOT)/bin
  exename = test_knowledge_record
  
  requires += tests
  
  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_knowledge_record.cpp
  }
}

project (Test_Any) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  requires += tests

  after += Test_CapnFiles
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_any
  
  Documentation_Files {
  }

  Header_Files {
    tests/capnfiles
  }

  CAPN_Files {
    tests/capnfiles
  }

  Source_Files {
    tests/test_any.cpp
  }
}

project (Test_Any_So) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  requires += tests
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_any_so

  after += Test_Datatypes_Lib

  libs += datatypes_test

  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_any_so.cpp
  }
}

project (Test_Any_Transport_Multicast) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  requires += tests

  after += Test_CapnFiles
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_any_transport_multicast
  
  Documentation_Files {
  }

  Header_Files {
    tests/capnfiles
  }

  CAPN_Files {
    tests/capnfiles
  }

  Source_Files {
    tests/test_any_transport_multicast.cpp
  }
}

project (Test_Circular_Buffer) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  requires += tests
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_circular_buffer
  
  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_circular_buffer.cpp
  }
}

project (Test_History) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  requires += tests
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_history
  
  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/transports/test_history.cpp
  }
}

project (Test_Knowledge_Base) : using_madara, no_karl, no_xml, null_lock, using_simtime {
  requires += tests
  
  exeout = $(MADARA_ROOT)/bin
  exename = test_knowledge_base

  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_knowledge_base.cpp
  }
}

