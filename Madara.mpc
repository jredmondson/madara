
project (Madara) : build_files, using_splice, splice_transport, using_ndds, madara_zmq, using_ssl, ssl_filters, lz4_filters, ndds_transport, no_karl, no_xml, port/python/using_python, python_callbacks, null_lock, port/java/using_java, port/java/using_android, port/java/using_openjdk, using_simtime, debug_build, using_boost, using_clang, using_android, using_capnp, using_nothreadlocal, using_filesystem {

  sharedname = MADARA
  dynamicflags += MADARA_BUILD_DLL
  staticflags += MADARA_BUILD_STATIC
  libout = $(MADARA_ROOT)/lib

  prebuild = perl $(MADARA_ROOT)/bin/generate_version_include.pl

  specific(prop:microsoft) {
    DisableSpecificWarnings += 4005 4251 4275 4244
    macros += _CRT_SECURE_NO_WARNINGS
  }

  specific(prop:make) {
    postbuild += ln -sf $(MADARA_ROOT)/lib/libMADARA.so $(MADARA_ROOT)/.
  }

  includes += $(MADARA_ROOT)/include
  libpaths += $(MADARA_ROOT)/lib

  verbatim (make, local, true) {
    CPPFLAGS := -std=c++11 -Wall -Wextra -Wnon-virtual-dtor \
      -Woverloaded-virtual -pedantic -O3 $(CPPFLAGS)
  }

  Build_Files {
    .
    docs
    port/java
    port/python
  }

  Documentation_Files {
    INSTALL.txt
    LICENSE.txt
    README.txt
    VERSION.txt
  }

  Inline_Files {
    include/madara/knowledge
    include/madara/knowledge/containers
    include/madara/knowledge/rcw
    include/madara/filters
    include/madara/logger/Logger.inl
    include/madara/utility
    include/madara/threads/Threader.inl
    include/madara/threads/WorkerThread.inl
    include/madara/transport/Transport.inl
    include/madara/transport/TransportSettings.inl
    include/madara/transport/BandwidthMonitor.inl
    include/madara/expression
  }

  Template_Files {
    include/madara/utility/LQueue.cpp
    include/madara/utility/LStack.cpp
    include/madara/utility/Refcounter.cpp
    include/madara/utility/ThreadSafeRefcounter.cpp
    include/madara/utility/ThreadSafeVector.cpp
    include/madara/knowledge/containers/TypedVector.cpp
  }

  Source_Files {
    include/madara/expression
    include/madara/filters
    include/madara/knowledge
    include/madara/knowledge/containers
    include/madara/knowledge/rcw
    include/madara/logger
    include/madara/threads
    include/madara/transport/udp
    include/madara/transport/multicast
    include/madara/transport/broadcast
    include/madara/transport/BandwidthMonitor.cpp
    include/madara/transport/MessageHeader.cpp
    include/madara/transport/PacketScheduler.cpp
    include/madara/transport/ReducedMessageHeader.cpp
    include/madara/transport/QoSTransportSettings.cpp
    include/madara/transport/Fragmentation.cpp
    include/madara/transport/TransportSettings.cpp
    include/madara/transport/TransportContext.cpp
    include/madara/transport/Transport.cpp
    include/madara/transport/BasicASIOTransport.cpp
    include/madara/utility/Utility.cpp
    include/madara/utility/SimTime.cpp
    include/madara/utility/Refcounter.cpp
    include/pugi
  }

  Header_Files {
    include/madara/expression
    include/madara/filters
    include/madara/knowledge
    include/madara/knowledge/containers
    include/madara/knowledge/rcw
    include/madara/logger
    include/madara/threads
    include/madara/transport/udp
    include/madara/transport/multicast
    include/madara/transport/broadcast
    include/madara/transport/BandwidthMonitor.h
    include/madara/transport/Transport.h
    include/madara/transport/MessageHeader.h
    include/madara/transport/PacketScheduler.h
    include/madara/transport/ReducedMessageHeader.h
    include/madara/transport/Fragmentation.h
    include/madara/transport/QoSTransportSettings.h
    include/madara/transport/TransportSettings.h
    include/madara/transport/TransportContext.h
    include/madara/transport/BasicASIOTransport.h
    include/madara/utility
    include/madara/Boost.h
    include/madara/MADARA_export.h
    include/madara/LockType.h
    include/madara/Namespaces.h
    include/pugi
  }
}

project (Madara_Version) : using_madara {
  exeout = $(MADARA_ROOT)/bin
  exename = madara_version
  
  Documentation_Files {
  }
  
  Header_Files {
  }

  Source_Files {
    tests/madara_version.cpp
  }
}


project (KaRL) : using_madara, no_karl, using_ssl, using_lz4 {
  exeout = $(MADARA_ROOT)/bin
  exename = karl

  libs += boost_filesystem
  libs += capnpc 
  
  after = Madara
  
  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tools/karl.cpp
  }
}

project (Stk_Inspect) : using_madara, no_karl, using_ssl, using_lz4 {
  exeout = $(MADARA_ROOT)/bin
  exename = stk_inspect

  libs += capnpc 
  
  after = Madara
  
  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tools/stk_inspect.cpp
  }
}

project (mabundle) : using_madara, no_karl, using_ssl, using_lz4, using_filesystem {
  exeout = $(MADARA_ROOT)/bin
  exename = mabundle

  after = Madara
  
  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tools/mabundle.cpp
  }
}

project (mfs) : using_madara, no_karl, using_ssl, using_lz4, using_filesystem {
  exeout = $(MADARA_ROOT)/bin
  exename = mfs

  after = Madara
  
  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tools/mfs.cpp
  }
}

project (Madara_Registry) : using_madara, no_karl {
  exeout = $(MADARA_ROOT)/bin
  exename = madara_registry
  
  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tools/madara_registry.cpp
  }
}


project (MPGen) : using_madara {
  exeout = $(MADARA_ROOT)/bin
  exename = mpgen
  
  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tools/mpgen.cpp
  }
}
